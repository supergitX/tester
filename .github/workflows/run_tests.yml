name: Run Tests on Reviewed Code

on:
  push:
    branches:
      - master
  workflow_dispatch:
permissions:
  contents: write  # Allows pushing commits

jobs:
  run-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true  # Ensures Actions can push changes

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: pip install requests pytest

      - name: Generate test cases
        run: python generate_tests.py
        env:
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
      - name: Checkout and switch to test branch
        run: |
          git fetch origin
          git checkout test || git checkout -b test
      - name: Commit and push generated test file to test branch
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions@github.com"
          git add test_reviewed_code.py
          git commit -m "ü§ñ Auto-generated test cases for reviewed_code.py" || echo "No changes to commit"
          
          # Pull latest changes and auto-resolve conflicts
          git pull --rebase --strategy-option=theirs origin test || echo "Ignoring merge conflicts"
          
          git push origin test --force  # Force push to overwrite conflicts
          
      - name: Save and push test log with timestamp to test branch
        run: |
          TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
          LOG_FILE="test_generation_$TIMESTAMP.log"
          cp test_generation.log "$LOG_FILE"

          git add "$LOG_FILE"
          git commit -m "üìù Add test generation log $LOG_FILE" || echo "No changes to commit"
          git push origin test --force

      - name: Run tests
        run: |
          pytest test_reviewed_code.py || true  # Run tests, don't fail workflow if they fail
